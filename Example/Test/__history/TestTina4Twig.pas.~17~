unit TestTina4Twig;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Variants, System.Math, System.NetEncoding,
  System.Generics.Collections, JSON, System.SysUtils, System.Classes,
  System.RegularExpressions, System.Rtti, Tina4Twig;

type
  // Test methods for class TTina4Twig

  TestTTina4Twig = class(TTestCase)
  strict private
    FTina4Twig: TTina4Twig;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetVariable;
    procedure TestRender;
  end;

implementation

procedure TestTTina4Twig.SetUp;
begin
  FTina4Twig := TTina4Twig.Create;
end;

procedure TestTTina4Twig.TearDown;
begin
  FTina4Twig.Free;
  FTina4Twig := nil;
end;

procedure TestTTina4Twig.TestSetVariable;
var
  AValue: TValue;
  AName: string;
begin
  // TODO: Setup method call parameters
  FTina4Twig.SetVariable(AName, AValue);
  // TODO: Validate method results
end;

procedure TestTTina4Twig.TestRender;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  // TODO: Setup method call parameters
  TemplateOrContent := '{{name}}';
  FTina4Twig.SetVariable('name', 'Andre');

  var People := TJSONArray.Create;

  var Person := TJSONObject.Create;
  Person.AddPair('name', 'Andre');
  Person.AddPair('age', 46);
  People.Add(Person);

  Person := TJSONObject.Create;
  Person.AddPair('name', 'George');
  Person.AddPair('age', 26);
  People.Add(Person);

  Person := TJSONObject.Create;
  Person.AddPair('name', 'Lloyd');
  Person.AddPair('age', 56);
  People.Add(Person);

  FTina4Twig.SetVariable('people', People);

  ReturnValue := FTina4Twig.Render(TemplateOrContent);

  Check(ReturnValue = 'Andre', '{{name}} should be Andre1');

  TemplateOrContent := '{%if name == "Andre"%}Yes{%else%}No{%endif%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Yes', TemplateOrContent+' Should be Yes');

  TemplateOrContent := '{%if name != "Andre"%}Yes{%else%}No{%endif%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'No', TemplateOrContent+' Should be No');

  TemplateOrContent := '{%for a in [1,2,3]%}{{a}}{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '123', TemplateOrContent+' Should be 123');

  TemplateOrContent := '{%for a in persons%}{{a}}{%else%}No persons{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'No persons', TemplateOrContent+'- Should be No persons');



  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTTina4Twig.Suite);
end.

