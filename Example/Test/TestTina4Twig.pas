unit TestTina4Twig;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Variants, System.Math, System.NetEncoding,
  System.Generics.Collections, JSON, System.SysUtils, System.Classes,
  System.RegularExpressions, System.Rtti, Tina4Twig;

type
  // Test methods for class TTina4Twig

  TestTTina4Twig = class(TTestCase)
  strict private
    FTina4Twig: TTina4Twig;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetVariable;
    procedure TestRender;
    procedure TestForLoops;
    procedure TestWith;
    procedure TestIf;
    procedure TestTags;
    procedure TestComplex;
    procedure TextExpressions;
    procedure TestFilters;
    procedure TestMacros;
    procedure TestFormat;
  end;

implementation

procedure TestTTina4Twig.SetUp;
var
  PeopleArray: TArray<TValue>;
begin
  FTina4Twig := TTina4Twig.Create;
  FTina4Twig.SetVariable('name', 'Andre');
  FTina4Twig.SetVariable('age', 46);


  // Set up test context
  var PersonDict := TDictionary<String, TValue>.Create;
  PersonDict.Add('name', TValue.From<String>('Andre'));
  PersonDict.Add('age', TValue.From<Integer>(46));

  SetLength(PeopleArray, 2);
  PeopleArray[0] := TValue.From<TDictionary<String, TValue>>(PersonDict);
  PersonDict := TDictionary<String, TValue>.Create;
  PersonDict.Add('name', TValue.From<String>('Bob'));
  PersonDict.Add('age', TValue.From<Integer>(25));
  PeopleArray[1] := TValue.From<TDictionary<String, TValue>>(PersonDict);

  FTina4Twig.SetVariable('people', TValue.From<TArray<TValue>>(PeopleArray));

  // Set up JSON array
  var JSONArray := TJSONArray.Create;
  JSONArray.AddElement(TJSONString.Create('Alice'));
  JSONArray.AddElement(TJSONString.Create('Bob'));
  FTina4Twig.SetVariable('names', TValue.From<TJSONArray>(JSONArray));


  var PJSONArray := TJSONArray.Create;
  PJSONArray.Add(TJSONObject.ParseJSONValue('{"name": "Alice", "age": 22}') as TJSONObject);
  PJSONArray.Add(TJSONObject.ParseJSONValue('{"name": "Bob", "age": 50}') as TJSONObject);

  FTina4Twig.SetVariable('people_json', PJSONArray);

  // Set up empty array
  FTina4Twig.SetVariable('persons', TValue.From<TArray<TValue>>([]));
end;

procedure TestTTina4Twig.TearDown;
begin
  FTina4Twig.Free;
  FTina4Twig := nil;
end;

procedure TestTTina4Twig.TestSetVariable;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  TemplateOrContent := '{{dump(people)}}{{dump(people_json)}}{{dump(names)}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  WriteLn(ReturnValue);

  TemplateOrContent := '{{people[0].name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  WriteLn(ReturnValue);

  TemplateOrContent := '{{people[0].name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  WriteLn(ReturnValue);

  TemplateOrContent := '{{name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  WriteLn(ReturnValue);
end;

procedure TestTTina4Twig.TestTags;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  TemplateOrContent := '{% with %}{% endwith %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be Empty, got ' + ReturnValue);

  TemplateOrContent := '{%with%}{%endwith%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be Empty, got ' + ReturnValue);

  TemplateOrContent := '{% if 1 == 1 %}{% else %}}{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be Empty, got ' + ReturnValue);

  TemplateOrContent := '{%if 1 == 1%}{%else%}{%endif%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be Empty, got ' + ReturnValue);


  TemplateOrContent := '{%for a in [1,2,3]%}{%else%}{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be Empty, got ' + ReturnValue);

  TemplateOrContent := '{% for a in [1,2,3] %}{% else %}{% endfor %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be Empty, got ' + ReturnValue);

end;

procedure TestTTina4Twig.TestWith;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
    // Test Case 2: With block with new variables, accessing outer context
  TemplateOrContent := '{% with { new_name: "Bob" } %}{{ people[0].name }} {{ new_name }}{% endwith %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre Bob', TemplateOrContent + ' - Should be Andre Bob, got ' + ReturnValue);

  // Test Case 4: With block using a context variable
  TemplateOrContent := '{% with people[0] %}{{ name }} {{ age }}{% endwith %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre 46', TemplateOrContent + ' - Should be Andre 46, got ' + ReturnValue);

  // Test Case 5: Empty with block
  TemplateOrContent := '{% with %}{% endwith %}{{ people[0].name }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre', TemplateOrContent + ' - Should be Andre, got ' + ReturnValue);


  // Test Case 3: With block with only, isolating context
  TemplateOrContent := '{% with { new_name: "Bob" } only %}{{ new_name }} {{ people[0].name }}{% endwith %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Bob ', TemplateOrContent + ' - Should be Bob (empty), got ' + ReturnValue);

   // Test Case 6: Nested with blocks
  TemplateOrContent := '{% with { outer_name: "Outer" } %}{{ people[0].name }} {{ outer_name }} {% with { inner_name: "Inner" } %}{{ inner_name }} {{ outer_name }} {{ people[0].name }}{% endwith %}{% endwith %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre Outer Inner Outer Andre', TemplateOrContent + ' - Should be Andre Outer Inner Outer Andre, got ' + ReturnValue);

end;

procedure TestTTina4Twig.TextExpressions;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  TemplateOrContent := '{% set name = "Something Cool" %}{{name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Something Cool', TemplateOrContent + ' - Should be Something Cool, got ' + ReturnValue);

  TemplateOrContent := '{% set number = 1 %}{{number + 1}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '2', TemplateOrContent + ' - Should be 2, got ' + ReturnValue);

  TemplateOrContent := '{% set name = "Jim" %}{{name ~ " Beam"}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Jim Beam', TemplateOrContent + ' - Should be Jim Beam, got ' + ReturnValue);

  TemplateOrContent := '{% set number = 1.859 %}{{number | number_format (2,"-") }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1-86', TemplateOrContent + ' - Should be 1-86, got ' + ReturnValue);

  TemplateOrContent := '{% set number = 1.859 %}{{number | number_format (2,"-") }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1-86', TemplateOrContent + ' - Should be 1-86, got ' + ReturnValue);


  TemplateOrContent := '{% set number = 1.859 %}{{number | number_format (2,".") + 2 }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '3.86', TemplateOrContent + ' - Should be 3.86, got ' + ReturnValue);

  TemplateOrContent := '{% set user = {''name'': ''Fabien''} %}{{user.name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Fabien', TemplateOrContent + ' - Should be Fabien, got ' + ReturnValue);

  TemplateOrContent := '{% set tasks = [{''id'': 1, ''name'': ''Test''},{''id'': 2, ''name'': ''Test 2''}] %}{{dump(tasks)}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '<pre>tasks ='#$D#$A'  array(2) {'#$D#$A'    [0]=>'#$D#$A'      array(2) {'#$D#$A'        ["id"]=>'#$D#$A'          int(1)'#$D#$A'        ["name"]=>'#$D#$A'          string(4) "Test"'#$D#$A'      }'#$D#$A'    [1]=>'#$D#$A'      array(2) {'#$D#$A'        ["id"]=>'#$D#$A'          int(2)'#$D#$A'        ["name"]=>'#$D#$A'          string(6) "Test 2"'#$D#$A'      }'#$D#$A'  }'#$D#$A'</pre>', TemplateOrContent + ' - Should be <pre>tasks ='#$D#$A'  array(2) {'#$D#$A'    [0]=>'#$D#$A'      array(2) {'#$D#$A'        ["id"]=>'#$D#$A'          int(1)'#$D#$A'        ["name"]=>'#$D#$A'          string(4) "Test"'#$D#$A'      }'#$D#$A'    [1]=>'#$D#$A'      array(2) {'#$D#$A'        ["id"]=>'#$D#$A'          int(2)'#$D#$A'        ["name"]=>'#$D#$A'          string(6) "Test 2"'#$D#$A'      }'#$D#$A'  }'#$D#$A'</pre>, got ' + ReturnValue);
end;

procedure TestTTina4Twig.TestComplex;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  TemplateOrContent := '{% set trees = [{"name": "Beech"}, {"name": "Oak"}, {"name": "Poplar"}]%}{%for a in trees%}{% if a.name == "Oak" %}OK{% else %}NO{% endif %}{% else %}No trees{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'NOOKNO', TemplateOrContent + ' - Should be NOOKNO, got ' + ReturnValue);

  TemplateOrContent := '{% set trees = [{"name": "Beech"}, {"name": "Oak"}, {"name": "Poplar"}]%}{%for a in trees%}{% if a.name == "Oak" %}OK{% else %}NO{% endif %}{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'NOOKNO', TemplateOrContent + ' - Should be NOOKNO, got ' + ReturnValue);

end;

procedure TestTTina4Twig.TestFilters;
var
  ReturnValue: string;
  TemplateOrContent: string;

begin
  TemplateOrContent := '{{ [1, 2, 3, 4]|last }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4', TemplateOrContent + ' - Should be 4, got ' + ReturnValue);

  TemplateOrContent := '{{ [1, 2, 3, 4]| last }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4', TemplateOrContent + ' - Should be 4, got ' + ReturnValue);

  TemplateOrContent := '{{ [1, 2, 3, 4] | last }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4', TemplateOrContent + ' - Should be 4, got ' + ReturnValue);

  TemplateOrContent := '{{[1, 2, 3, 4]|last}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4', TemplateOrContent + ' - Should be 4, got ' + ReturnValue);

  TemplateOrContent := '{{"1234"|last}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4', TemplateOrContent + ' - Should be 4, got ' + ReturnValue);

  TemplateOrContent := '{{ "1234" | last }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4', TemplateOrContent + ' - Should be 4, got ' + ReturnValue);

  TemplateOrContent := '{{ "1234" | last ~ "5" }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '45', TemplateOrContent + ' - Should be 45, got ' + ReturnValue);
end;

procedure TestTTina4Twig.TestForLoops;
var
  ReturnValue: string;
  TemplateOrContent: string;

begin
  // Test 1: Empty loop with else clause (provided template)
  TemplateOrContent := '{%for a in persons%}{{a}}{%else%}No persons{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'No persons', TemplateOrContent + ' - Should be No persons, got ' + ReturnValue);

  // Test 2: Loop over array of objects
  TemplateOrContent := '{%for person in people%}{{person.name}} {%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre Bob ', TemplateOrContent + ' - Should be Andre Bob , got ' + ReturnValue);

  // Test 3: Loop over JSON array
  TemplateOrContent := '{%for name in names%}{{name}} {%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Alice Bob ', TemplateOrContent + ' - Should be Alice Bob , got ' + ReturnValue);

  // Test 4: Loop over inline array
  TemplateOrContent := '{%for item in [1, 2, 3]%}{{item}} {%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1 2 3 ', TemplateOrContent + ' - Should be 1 2 3 , got ' + ReturnValue);

  // Test 5: Loop over dictionary
  TemplateOrContent := '{%for value in people[0]%}{{value}} {%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue.Contains('Andre') and ReturnValue.Contains('46'), TemplateOrContent + ' - Should contain Andre and 46, got ' + ReturnValue);

  // Test 6: Nested loop
  TemplateOrContent := '{%for person in people%}{%for name in names%}{{person.name}}-{{name}} {%endfor%}{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre-Alice Andre-Bob Bob-Alice Bob-Bob ', TemplateOrContent + ' - Should be Andre-Alice Andre-Bob Bob-Alice Bob-Bob , got ' + ReturnValue);

  TemplateOrContent := '{%for a in [1,2,3]%}{{a}}{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '123', TemplateOrContent+' Should be 123');


  TemplateOrContent := '{%for a in persons%}{{a}}{%else%}No persons{%endfor%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'No persons', TemplateOrContent+'- Should be No persons, got '+ReturnValue);
end;

procedure TestTTina4Twig.TestFormat;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  // TestFormatSimpleString
  FTina4Twig.SetVariable('value', 'World');
  TemplateOrContent := '{{ "Hello %s"|format(value) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Hello World', TemplateOrContent + ' - Should be "Hello World", got ' + ReturnValue);

  // TestFormatInteger
  FTina4Twig.SetVariable('number', 123);
  TemplateOrContent := '{{ "Number %d"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Number 123', TemplateOrContent + ' - Should be "Number 123", got ' + ReturnValue);

  // TestFormatFloatPrecision
  FTina4Twig.SetVariable('pi', 3.14159);
  TemplateOrContent := '{{ "Pi is %.2f"|format(pi) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Pi is 3.14', TemplateOrContent + ' - Should be "Pi is 3.14", got ' + ReturnValue);

  // TestFormatPadding
  FTina4Twig.SetVariable('text', 'hello');
  TemplateOrContent := '{{ "%10s"|format(text) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '     hello', TemplateOrContent + ' - Should be "     hello", got ' + ReturnValue);

  // TestFormatLeftJustify
  FTina4Twig.SetVariable('text', 'hello');
  TemplateOrContent := '{{ "%-10s"|format(text) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'hello     ', TemplateOrContent + ' - Should be "hello     ", got ' + ReturnValue);

  // TestFormatZeroPad
  FTina4Twig.SetVariable('number', 42);
  TemplateOrContent := '{{ "%010d"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '0000000042', TemplateOrContent + ' - Should be "0000000042", got ' + ReturnValue);

  // TestFormatSignPositive
  FTina4Twig.SetVariable('number', 42);
  TemplateOrContent := '{{ "%+d"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '+42', TemplateOrContent + ' - Should be "+42", got ' + ReturnValue);

  // TestFormatSignNegative
  FTina4Twig.SetVariable('number', -42);
  TemplateOrContent := '{{ "%+d"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '-42', TemplateOrContent + ' - Should be "-42", got ' + ReturnValue);

  // TestFormatArgNum
  FTina4Twig.SetVariable('word1', 'world');
  FTina4Twig.SetVariable('word2', 'hello');
  TemplateOrContent := '{{ "%2$s %1$s"|format(word1, word2) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'hello world', TemplateOrContent + ' - Should be "hello world", got ' + ReturnValue);

  // TestFormatWidthAsterisk
  FTina4Twig.SetVariable('width', 10);
  FTina4Twig.SetVariable('text', 'hello');
  TemplateOrContent := '{{ "%*s"|format(width, text) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '     hello', TemplateOrContent + ' - Should be "     hello", got ' + ReturnValue);

  // TestFormatPrecisionString
  FTina4Twig.SetVariable('text', 'hello');
  TemplateOrContent := '{{ "%.3s"|format(text) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'hel', TemplateOrContent + ' - Should be "hel", got ' + ReturnValue);

  // TestFormatChar
  FTina4Twig.SetVariable('code', 65);
  TemplateOrContent := '{{ "%c"|format(code) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'A', TemplateOrContent + ' - Should be "A", got ' + ReturnValue);

  // TestFormatPercentEscape
  TemplateOrContent := '{{ "100%%"|format }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '100%', TemplateOrContent + ' - Should be "100%", got ' + ReturnValue);

  // TestFormatComplex
  FTina4Twig.SetVariable('number', 42);
  TemplateOrContent := '{{ "%1$+5d"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '  +42', TemplateOrContent + ' - Should be "  +42", got ' + ReturnValue);

  // TestFormatBinary
  FTina4Twig.SetVariable('number', 10);
  TemplateOrContent := '{{ "%b"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1010', TemplateOrContent + ' - Should be "1010", got ' + ReturnValue);

  // TestFormatOctal
  FTina4Twig.SetVariable('number', 8);
  TemplateOrContent := '{{ "%o"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '10', TemplateOrContent + ' - Should be "10", got ' + ReturnValue);

  // TestFormatHexLower
  FTina4Twig.SetVariable('number', 255);
  TemplateOrContent := '{{ "%x"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'ff', TemplateOrContent + ' - Should be "ff", got ' + ReturnValue);

  // TestFormatHexUpper
  FTina4Twig.SetVariable('number', 255);
  TemplateOrContent := '{{ "%X"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'FF', TemplateOrContent + ' - Should be "FF", got ' + ReturnValue);

  // TestFormatScientificLower
  FTina4Twig.SetVariable('number', 1234.56);
  TemplateOrContent := '{{ "%e"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1.234560e+3', TemplateOrContent + ' - Should be "1.234560e+3", got ' + ReturnValue);

  // TestFormatScientificUpper
  FTina4Twig.SetVariable('number', 1234.56);
  TemplateOrContent := '{{ "%E"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1.234560E+3', TemplateOrContent + ' - Should be "1.234560E+3", got ' + ReturnValue);

  // TestFormatGeneral
  FTina4Twig.SetVariable('number', 1234.56);
  TemplateOrContent := '{{ "%g"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '1234.56', TemplateOrContent + ' - Should be "1234.56", got ' + ReturnValue);

  // TestFormatUnsigned
  FTina4Twig.SetVariable('number', 4294967295);
  TemplateOrContent := '{{ "%u"|format(number) }}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '4294967295', TemplateOrContent + ' - Should be "4294967295", got ' + ReturnValue);
end;

procedure TestTTina4Twig.TestIf;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin
  FTina4Twig.SetVariable('is_active', TValue.From<Boolean>(True));
  FTina4Twig.SetVariable('is_inactive', TValue.From<Boolean>(False));
  FTina4Twig.SetVariable('number', TValue.From<Integer>(42));
  FTina4Twig.SetVariable('text', TValue.From<String>('Hello World'));
  var Dict := TDictionary<String, TValue>.Create;
  Dict.Add('name', TValue.From<String>('Alice'));
  Dict.Add('age', TValue.From<Integer>(25));
  FTina4Twig.SetVariable('user', TValue.From<TDictionary<String, TValue>>(Dict));
  var Arr: TArray<TValue> := [TValue.From<String>('apple'), TValue.From<String>('banana'), TValue.From<String>('orange')];
  FTina4Twig.SetVariable('fruits', TValue.From<TArray<TValue>>(Arr));

  TemplateOrContent := '{{dump(fruits)}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  WriteLn(ReturnValue);

  // Test 1: Simple if block with true condition
  TemplateOrContent := '{%if is_active %}Active{%endif%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Active', TemplateOrContent + ' - Should be Active, got ' + ReturnValue);

  // Test 2: Simple if block with false condition
  TemplateOrContent := '{%if is_inactive %}Inactive{%endif%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent + ' - Should be empty, got ' + ReturnValue);

  // Test 3: If block with else
  TemplateOrContent := '{% if is_inactive %}Inactive{% else %}Active{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Active', TemplateOrContent + ' - Should be Active, got ' + ReturnValue);

  // Test 6: If block with comparison operators
  TemplateOrContent := '{% if number > 40 %}Greater{% elseif number < 40 %}Less{% elseif number == 40 %}Equal{% else %}Exact{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Greater', TemplateOrContent + ' - Should be Greater, got ' + ReturnValue);

  // Test 7: If block with 'in' operator
  TemplateOrContent := '{% if "banana" in fruits %}Found{% else %}Not Found{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Found', TemplateOrContent + ' - Should be Found, got ' + ReturnValue);

  // Test 8: If block with 'starts with' operator
  TemplateOrContent := '{% if text starts with "Hello" %}Starts Hello{% else %}Does Not Start{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Starts Hello', TemplateOrContent + ' - Should be Starts Hello, got ' + ReturnValue);

  // Test 9: If block with 'matches' operator
  TemplateOrContent := '{% if text matches "^Hello.*" %}Matches{% else %}No Match{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Matches', TemplateOrContent + ' - Should be Matches, got ' + ReturnValue);

  // Test 4: If block with elseif
  TemplateOrContent := '{% if number == 0 %}Zero{% elseif number == 42 %}Forty-Two{% else %}Other{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Forty-Two', TemplateOrContent + ' - Should be Forty-Two, got ' + ReturnValue);

  // Test 5: Nested if blocks
  TemplateOrContent := '{% if is_active %}{% if number > 40 %}High{% else %}Low{% endif %}{% else %}Inactive{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'High', TemplateOrContent + ' - Should be High, got ' + ReturnValue);
end;

procedure TestTTina4Twig.TestMacros;
var
  ReturnValue: string;
  TemplateOrContent: string;
begin

  TemplateOrContent := '{% macro input(name, value, type = "text", size = 20) %}<input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>{% endmacro %}{{input("Test")}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '<input type="text" name="Test" value="" size="20"/>', TemplateOrContent+'- Should be <input type="text" name="Test" value="" size="20"/> , got '+ReturnValue);


  TemplateOrContent := '{% macro a(name, value, type = "text", size = 20) %}A<input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>{% endmacro %}{% macro b(name, value, type = "text", size = 20) %}B<input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}"/>{% endmacro %}{{a("Test")}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'A<input type="text" name="Test" value="" size="20"/>', TemplateOrContent+'- Should be A<input type="text" name="Test" value="" size="20"/>, got '+ReturnValue);


end;

procedure TestTTina4Twig.TestRender;
var
  ReturnValue: string;
  TemplateOrContent: string;

begin
  // TODO: Setup method call parameters
  TemplateOrContent := '{{name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre', '{{name}} should be Andre');

  // Test Case 1: Original test - direct access to people[0].name
  TemplateOrContent := '{{people[0].name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Andre', TemplateOrContent + ' - Should be Andre, got ' + ReturnValue);

  TemplateOrContent := '{%set name = "Hello"%}{{name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Hello', TemplateOrContent+' Should be Hello '+ReturnValue);

  TemplateOrContent := '{% extends "base.twig" %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Original TitleOriginal Content'#$D#$A, TemplateOrContent+' Should be Original TitleOriginal Content '+ReturnValue);

  TemplateOrContent := '{% extends "base.twig" %}{%block title%}My Title{%endblock%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'My TitleOriginal Content'#$D#$A, TemplateOrContent+' Should be My TitleOriginal Content '+ReturnValue);


  TemplateOrContent := '{% extends "base.twig" %}{%block content%}My Content{%endblock%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Original TitleMy Content'#$D#$A, TemplateOrContent+' Should be Original TitleMy Content '+ReturnValue);

  TemplateOrContent := '{% extends "base.twig" %}{%block title%}My Title{%endblock%}{%block content%}My Content{%endblock%}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'My TitleMy Content'#$D#$A, TemplateOrContent+' Should be My TitleMy Content '+ReturnValue);


  TemplateOrContent := '{% set trees = ["Beech", "Oak", "Popular"] %}{{dump(trees)}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '<pre>trees ='#$D#$A'  array(3) {'#$D#$A'    [0]=>'#$D#$A'      string(5) "Beech"'#$D#$A'    [1]=>'#$D#$A'      string(3) "Oak"'#$D#$A'    [2]=>'#$D#$A'      string(7) "Popular"'#$D#$A'  }'#$D#$A'</pre>', TemplateOrContent+' Should be array '+ReturnValue);


  TemplateOrContent := '{% set trees = ["Beech", "Oak", "Poplar"] %}{{trees[1]}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Oak', TemplateOrContent+' Should be Oak '+ReturnValue);

  TemplateOrContent := '{% set trees = [{"name": "Beech"}, {"name": "Oak"}, {"name": "Poplar"}] %}{{trees[2].name}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Poplar', TemplateOrContent+' Should be Poplar '+ReturnValue);


  TemplateOrContent := '{%set trees = [{"name": "Beech"}, {"name": "Oak"}, {"name": "Poplar"}]%}{{trees | length}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '3', TemplateOrContent+' Should be 3 '+ReturnValue);

  TemplateOrContent := '{{Moo}}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = '', TemplateOrContent+' Should be Blank '+ReturnValue);


  TemplateOrContent := '{% if name == "Andre" %}Yes{% else %}No{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'Yes', TemplateOrContent+' Should be Yes, got '+ ReturnValue);

  TemplateOrContent := '{% if name != "Andre" %}Yes{% else %}No{% endif %}';
  ReturnValue := FTina4Twig.Render(TemplateOrContent);
  Check(ReturnValue = 'No', TemplateOrContent+' Should be No, got '+ ReturnValue);




  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTTina4Twig.Suite);
end.

